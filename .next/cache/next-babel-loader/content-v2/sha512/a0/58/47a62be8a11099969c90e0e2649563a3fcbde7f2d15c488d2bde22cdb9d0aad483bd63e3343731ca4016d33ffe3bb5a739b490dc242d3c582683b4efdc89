{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/peynao/Documents/Datos/Front End Developer/NextJS/Section 12/nextjs-course-code-07849776424a7b0f111804e1130acc4e61169252/components/posts/post-detail/post-content.js\";\nimport ReactMarkdown from \"react-markdown\";\nimport Image from \"next/image\";\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport atomDark from \"react-syntax-highlighter/dist/cjs/styles/prism/atom-dark\";\nimport js from \"react-syntax-highlighter/dist/cjs/languages/prism/javascript\";\nimport css from \"react-syntax-highlighter/dist/cjs/languages/prism/css\";\nimport PostHeader from \"./post-header\";\nimport classes from \"./post-content.module.css\";\nSyntaxHighlighter.registerLanguage(\"js\", js);\nSyntaxHighlighter.registerLanguage(\"css\", css);\n\nfunction PostContent(props) {\n  var post = props.post;\n  var imagePath = \"/images/posts/\".concat(post.slug, \"/\").concat(post.image);\n  console.log(\"imagePath: \", imagePath);\n  var customRenderers = {\n    p: function p(paragraph) {\n      var node = paragraph.node;\n\n      if (node.children[0].tagName === \"img\") {\n        var image = node.children[0];\n        console.log(\"IMG SRC: \", image.properties.src);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.image,\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: \"\".concat(image.properties.src),\n            alt: image.alt,\n            width: 600,\n            height: 300\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: paragraph.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this);\n    },\n    code: function code(_code) {\n      var className = _code.className,\n          children = _code.children;\n      var language = className.split(\"-\")[1]; // className is something like language-js => We need the \"js\" part here\n\n      return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        style: atomDark,\n        language: language,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: classes.content,\n    children: [/*#__PURE__*/_jsxDEV(PostHeader, {\n      title: post.title,\n      image: imagePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      linkTargets: \"_blank\",\n      components: customRenderers,\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_c = PostContent;\nexport default PostContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContent\");","map":{"version":3,"sources":["/Users/peynao/Documents/Datos/Front End Developer/NextJS/Section 12/nextjs-course-code-07849776424a7b0f111804e1130acc4e61169252/components/posts/post-detail/post-content.js"],"names":["ReactMarkdown","Image","PrismLight","SyntaxHighlighter","atomDark","js","css","PostHeader","classes","registerLanguage","PostContent","props","post","imagePath","slug","image","console","log","customRenderers","p","paragraph","node","children","tagName","properties","src","alt","code","className","language","split","content","title"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,UAAU,IAAIC,iBAAvB,QAAgD,0BAAhD;AACA,OAAOC,QAAP,MAAqB,0DAArB;AACA,OAAOC,EAAP,MAAe,8DAAf;AACA,OAAOC,GAAP,MAAgB,uDAAhB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEAL,iBAAiB,CAACM,gBAAlB,CAAmC,IAAnC,EAAyCJ,EAAzC;AACAF,iBAAiB,CAACM,gBAAlB,CAAmC,KAAnC,EAA0CH,GAA1C;;AAEA,SAASI,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MAClBC,IADkB,GACTD,KADS,CAClBC,IADkB;AAG1B,MAAMC,SAAS,2BAAoBD,IAAI,CAACE,IAAzB,cAAiCF,IAAI,CAACG,KAAtC,CAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,SAA3B;AACA,MAAMK,eAAe,GAAG;AACtBC,IAAAA,CADsB,aACpBC,SADoB,EACT;AAAA,UACHC,IADG,GACMD,SADN,CACHC,IADG;;AAEX,UAAIA,IAAI,CAACC,QAAL,CAAc,CAAd,EAAiBC,OAAjB,KAA6B,KAAjC,EAAwC;AACtC,YAAMR,KAAK,GAAGM,IAAI,CAACC,QAAL,CAAc,CAAd,CAAd;AAEAN,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAK,CAACS,UAAN,CAAiBC,GAA1C;AACA,4BACE;AAAK,UAAA,SAAS,EAAEjB,OAAO,CAACO,KAAxB;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,GAAG,YAAKA,KAAK,CAACS,UAAN,CAAiBC,GAAtB,CADL;AAEE,YAAA,GAAG,EAAEV,KAAK,CAACW,GAFb;AAGE,YAAA,KAAK,EAAE,GAHT;AAIE,YAAA,MAAM,EAAE;AAJV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD;;AAED,0BAAO;AAAA,kBAAIN,SAAS,CAACE;AAAd;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KApBqB;AAsBtBK,IAAAA,IAtBsB,gBAsBjBA,KAtBiB,EAsBX;AAAA,UACDC,SADC,GACuBD,KADvB,CACDC,SADC;AAAA,UACUN,QADV,GACuBK,KADvB,CACUL,QADV;AAET,UAAMO,QAAQ,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAjB,CAFS,CAEiC;;AAC1C,0BACE,QAAC,iBAAD;AACE,QAAA,KAAK,EAAE1B,QADT;AAEE,QAAA,QAAQ,EAAEyB,QAFZ;AAGE,QAAA,QAAQ,EAAEP;AAHZ;AAAA;AAAA;AAAA;AAAA,cADF;AAOD;AAhCqB,GAAxB;AAmCA,sBACE;AAAS,IAAA,SAAS,EAAEd,OAAO,CAACuB,OAA5B;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEnB,IAAI,CAACoB,KAAxB;AAA+B,MAAA,KAAK,EAAEnB;AAAtC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,WAAW,EAAC,QAA3B;AAAoC,MAAA,UAAU,EAAEK,eAAhD;AAAA,gBACGN,IAAI,CAACmB;AADR;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KAjDQrB,W;AAmDT,eAAeA,WAAf","sourcesContent":["import ReactMarkdown from \"react-markdown\";\r\nimport Image from \"next/image\";\r\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport atomDark from \"react-syntax-highlighter/dist/cjs/styles/prism/atom-dark\";\r\nimport js from \"react-syntax-highlighter/dist/cjs/languages/prism/javascript\";\r\nimport css from \"react-syntax-highlighter/dist/cjs/languages/prism/css\";\r\n\r\nimport PostHeader from \"./post-header\";\r\nimport classes from \"./post-content.module.css\";\r\n\r\nSyntaxHighlighter.registerLanguage(\"js\", js);\r\nSyntaxHighlighter.registerLanguage(\"css\", css);\r\n\r\nfunction PostContent(props) {\r\n  const { post } = props;\r\n\r\n  const imagePath = `/images/posts/${post.slug}/${post.image}`;\r\n\r\n  console.log(\"imagePath: \", imagePath);\r\n  const customRenderers = {\r\n    p(paragraph) {\r\n      const { node } = paragraph;\r\n      if (node.children[0].tagName === \"img\") {\r\n        const image = node.children[0];\r\n\r\n        console.log(\"IMG SRC: \", image.properties.src);\r\n        return (\r\n          <div className={classes.image}>\r\n            <Image\r\n              src={`${image.properties.src}`}\r\n              alt={image.alt}\r\n              width={600}\r\n              height={300}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return <p>{paragraph.children}</p>;\r\n    },\r\n\r\n    code(code) {\r\n      const { className, children } = code;\r\n      const language = className.split(\"-\")[1]; // className is something like language-js => We need the \"js\" part here\r\n      return (\r\n        <SyntaxHighlighter\r\n          style={atomDark}\r\n          language={language}\r\n          children={children}\r\n        />\r\n      );\r\n    },\r\n  };\r\n\r\n  return (\r\n    <article className={classes.content}>\r\n      <PostHeader title={post.title} image={imagePath} />\r\n      <ReactMarkdown linkTargets=\"_blank\" components={customRenderers}>\r\n        {post.content}\r\n      </ReactMarkdown>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default PostContent;\r\n"]},"metadata":{},"sourceType":"module"}