{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/peynao/Documents/Datos/Front End Developer/NextJS/Section 12/nextjs-course-code-07849776424a7b0f111804e1130acc4e61169252/components/contact/contact-form.js\";\nimport { useState, useEffect } from \"react\";\nimport classes from \"./contact-form.module.css\";\nimport Notification from \"../ui/notification\";\n\nasync function sendContextData(contactDetails) {\n  // We could use some validation before sending the info but we won't now as it's not the important on this study case\n  const response = await fetch(\"api/contact\", {\n    method: \"POST\",\n    body: JSON.stringify(contactDetails),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n}\n\nfunction ContactForm() {\n  const {\n    0: enteredEmail,\n    1: setEnteredEmail\n  } = useState(\"\");\n  const {\n    0: enteredName,\n    1: setEnteredName\n  } = useState(\"\");\n  const {\n    0: enteredMessage,\n    1: setEnteredMessage\n  } = useState(\"\");\n  const {\n    0: requestStatus,\n    1: setRequestStatus\n  } = useState(); // \"pending\", \"success\" or \"error\"\n\n  const {\n    0: requestError,\n    1: setRequestError\n  } = useState();\n  useEffect(() => {\n    if (requestStatus === \"pending\" || requestStatus === \"error\") {\n      const timer = setTimeout(() => {\n        setRequestStatus(null);\n        setRequestError(null);\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [requestStatus]);\n\n  async function sendMessageHandler(event) {\n    event.preventDefault();\n    setRequestStatus(\"pending\");\n\n    try {\n      await sendContextData({\n        email: enteredEmail,\n        name: enteredName,\n        message: enteredMessage\n      });\n      setRequestStatus(\"success\");\n      setEnteredMessage(\"\");\n      setEnteredEmail(\"\");\n      setEnteredName(\"\");\n    } catch (error) {\n      setRequestError(error.message);\n      setRequestStatus(\"error\");\n    }\n  }\n\n  let notification;\n\n  if (requestStatus === \"pending\") {\n    notification = {\n      status: \"pending\",\n      title: \"Sending message...\",\n      message: \"Your message is on its way!\"\n    };\n  } else if (requestStatus === \"success\") {\n    notification = {\n      status: \"success\",\n      title: \"Success.\",\n      message: \"Message sent successfully!!!\"\n    };\n  } else if (requestStatus === \"error\") {\n    notification = {\n      status: \"error\",\n      title: \"Error1\",\n      message: requestError\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.contact,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"How can I help you?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: sendMessageHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.controls,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Your Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            required: true,\n            value: enteredEmail,\n            onChange: event => setEnteredEmail(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Your Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            required: true,\n            value: enteredName,\n            onChange: event => setEnteredName(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"message\",\n            children: \"Your message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"message\",\n            rows: \"5\",\n            value: enteredMessage,\n            onChange: event => setEnteredMessage(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Send Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(Notification, {\n      status: notification.message.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/peynao/Documents/Datos/Front End Developer/NextJS/Section 12/nextjs-course-code-07849776424a7b0f111804e1130acc4e61169252/components/contact/contact-form.js"],"names":["useState","useEffect","classes","Notification","sendContextData","contactDetails","response","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","message","ContactForm","enteredEmail","setEnteredEmail","enteredName","setEnteredName","enteredMessage","setEnteredMessage","requestStatus","setRequestStatus","requestError","setRequestError","timer","setTimeout","clearTimeout","sendMessageHandler","event","preventDefault","email","name","error","notification","status","title","contact","form","controls","control","target","value","actions"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport classes from \"./contact-form.module.css\";\nimport Notification from \"../ui/notification\";\n\nasync function sendContextData(contactDetails) {\n  // We could use some validation before sending the info but we won't now as it's not the important on this study case\n  const response = await fetch(\"api/contact\", {\n    method: \"POST\",\n    body: JSON.stringify(contactDetails),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n}\n\nfunction ContactForm() {\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredMessage, setEnteredMessage] = useState(\"\");\n  const [requestStatus, setRequestStatus] = useState(); // \"pending\", \"success\" or \"error\"\n  const [requestError, setRequestError] = useState();\n\n  useEffect(() => {\n    if (requestStatus === \"pending\" || requestStatus === \"error\") {\n      const timer = setTimeout(() => {\n        setRequestStatus(null);\n        setRequestError(null);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [requestStatus]);\n\n  async function sendMessageHandler(event) {\n    event.preventDefault();\n\n    setRequestStatus(\"pending\");\n    try {\n      await sendContextData({\n        email: enteredEmail,\n        name: enteredName,\n        message: enteredMessage,\n      });\n      setRequestStatus(\"success\");\n      setEnteredMessage(\"\");\n      setEnteredEmail(\"\");\n      setEnteredName(\"\");\n    } catch (error) {\n      setRequestError(error.message);\n      setRequestStatus(\"error\");\n    }\n  }\n\n  let notification;\n\n  if (requestStatus === \"pending\") {\n    notification = {\n      status: \"pending\",\n      title: \"Sending message...\",\n      message: \"Your message is on its way!\",\n    };\n  } else if (requestStatus === \"success\") {\n    notification = {\n      status: \"success\",\n      title: \"Success.\",\n      message: \"Message sent successfully!!!\",\n    };\n  } else if (requestStatus === \"error\") {\n    notification = {\n      status: \"error\",\n      title: \"Error1\",\n      message: requestError,\n    };\n  }\n\n  return (\n    <section className={classes.contact}>\n      <h1>How can I help you?</h1>\n      <form className={classes.form} onSubmit={sendMessageHandler}>\n        <div className={classes.controls}>\n          <div className={classes.control}>\n            <label htmlFor=\"email\">Your Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              required\n              value={enteredEmail}\n              onChange={(event) => setEnteredEmail(event.target.value)}\n            />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"name\">Your Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              required\n              value={enteredName}\n              onChange={(event) => setEnteredName(event.target.value)}\n            />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"message\">Your message</label>\n            <textarea\n              id=\"message\"\n              rows=\"5\"\n              value={enteredMessage}\n              onChange={(event) => setEnteredMessage(event.target.value)}\n            ></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button>Send Message</button>\n          </div>\n        </div>\n      </form>\n      {notification && (\n        <Notification\n          status={notification.message.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}