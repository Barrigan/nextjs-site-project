{"ast":null,"code":"const multer = require(\"multer\"); //import { MongoClient } from \"mongodb\";\n\n\nconst fileStorageEngine = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, \"/images\");\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + \"--\" + file.originalname);\n  }\n});\nconst upload = multer({\n  storage: fileStorageEngine\n});\n\nfunction uploadImage(req, res) {\n  if (req.method === \"POST\") {\n    const {\n      file\n    } = req.body;\n    console.log(\"req.body: \", req.body);\n    console.log(\"req.body.file: \", req.body.file);\n    console.log(\"req.body.image: \", req.body.image);\n    console.log(\"Uploading image...\");\n\n    try {\n      let uploadedFile = upload.single(\"image\");\n      console.log(uploadedFile); //res.send(\"Single File upload success\");\n\n      res.status(200).json({\n        message: \"Single File upload success\"\n      });\n    } catch (error) {\n      res.status(500).json({\n        message: \"Error uploading Single File\"\n      });\n    }\n    /*\n    /* UP TO HERE UPDATED */\n\n    /*\n    /*\n    if (\n    !email ||\n    !email.includes(\"@\") ||\n    !name ||\n    name.trim() === \"\" ||\n    !message ||\n    message.trim() === \"\"\n    ) {\n    res.status(422).json({ message: \"Invalid input.\" });\n    return;\n    }\n    // Store it in a database\n    const newMessage = { email, name, message };\n    let client;\n    const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.l9qi7.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n    try {\n    client = await MongoClient.connect(connectionString);\n    / * client = await MongoClient.connect(\n    \"mongodb+srv://nextjs-user:L0ngAndBeautifulPassw0rd!@cluster0.l9qi7.mongodb.net/NextJSSection11?retryWrites=true&w=majority\"\n    ); * / \n    } catch (error) {\n    res.status(500).json({ message: \"Cold not connect to the database\" });\n    return;\n    }\n    const db = client.db(process.env.mongodb_database);\n    try {\n    const result = await db.collection(\"form-messages\").insertOne(newMessage);\n    newMessage.id = result.insertedId;\n    } catch (error) {\n    client.close();\n    res.status(500).json({ message: \"Storing message failed!\" });\n    return;\n    }\n    client.close();\n    console.log(newMessage);\n    res\n    .status(201)\n    .json({ message: \"Successfully stored message!\", message: newMessage });\n    */\n\n  }\n}\n\nexport default uploadImage;","map":{"version":3,"sources":["/Users/peynao/Documents/Datos/Front End Developer/NextJS/Section 12/nextjs-course-code-07849776424a7b0f111804e1130acc4e61169252/pages/api/uploadImage.js"],"names":["multer","require","fileStorageEngine","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","storage","uploadImage","res","method","body","console","log","image","uploadedFile","single","status","json","message","error"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;;AAEA,MAAMC,iBAAiB,GAAGF,MAAM,CAACG,WAAP,CAAmB;AAC3CC,EAAAA,WAAW,EAAE,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,KAAmB;AAC9BA,IAAAA,EAAE,CAAC,IAAD,EAAO,SAAP,CAAF;AACD,GAH0C;AAI3CC,EAAAA,QAAQ,EAAE,CAACH,GAAD,EAAMC,IAAN,EAAYC,EAAZ,KAAmB;AAC3BA,IAAAA,EAAE,CAAC,IAAD,EAAOE,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoBJ,IAAI,CAACK,YAAhC,CAAF;AACD;AAN0C,CAAnB,CAA1B;AASA,MAAMC,MAAM,GAAGZ,MAAM,CAAC;AAAEa,EAAAA,OAAO,EAAEX;AAAX,CAAD,CAArB;;AAEA,SAASY,WAAT,CAAqBT,GAArB,EAA0BU,GAA1B,EAA+B;AAC7B,MAAIV,GAAG,CAACW,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAM;AAAEV,MAAAA;AAAF,QAAWD,GAAG,CAACY,IAArB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bd,GAAG,CAACY,IAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bd,GAAG,CAACY,IAAJ,CAASX,IAAxC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCd,GAAG,CAACY,IAAJ,CAASG,KAAzC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AAEA,QAAI;AACF,UAAIE,YAAY,GAAGT,MAAM,CAACU,MAAP,CAAc,OAAd,CAAnB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,YAAZ,EAFE,CAGF;;AACAN,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACdX,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;AAAC;AACN;;AAC6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQG;AACF;;AAED,eAAeX,WAAf","sourcesContent":["const multer = require(\"multer\");\n\n//import { MongoClient } from \"mongodb\";\n\nconst fileStorageEngine = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, \"/images\");\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + \"--\" + file.originalname);\n  },\n});\n\nconst upload = multer({ storage: fileStorageEngine });\n\nfunction uploadImage(req, res) {\n  if (req.method === \"POST\") {\n    const { file } = req.body;\n\n    console.log(\"req.body: \", req.body);\n    console.log(\"req.body.file: \", req.body.file);\n    console.log(\"req.body.image: \", req.body.image);\n    console.log(\"Uploading image...\");\n\n    try {\n      let uploadedFile = upload.single(\"image\");\n      console.log(uploadedFile);\n      //res.send(\"Single File upload success\");\n      res.status(200).json({ message: \"Single File upload success\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error uploading Single File\" });\n    } /*\n\n    /* UP TO HERE UPDATED */ /*\n    /*\n    if (\n      !email ||\n      !email.includes(\"@\") ||\n      !name ||\n      name.trim() === \"\" ||\n      !message ||\n      message.trim() === \"\"\n    ) {\n      res.status(422).json({ message: \"Invalid input.\" });\n      return;\n    }\n\n    // Store it in a database\n    const newMessage = { email, name, message };\n\n    let client;\n\n    const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.l9qi7.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n    try {\n      client = await MongoClient.connect(connectionString);\n      / * client = await MongoClient.connect(\n        \"mongodb+srv://nextjs-user:L0ngAndBeautifulPassw0rd!@cluster0.l9qi7.mongodb.net/NextJSSection11?retryWrites=true&w=majority\"\n      ); * / \n    } catch (error) {\n      res.status(500).json({ message: \"Cold not connect to the database\" });\n      return;\n    }\n\n    const db = client.db(process.env.mongodb_database);\n    try {\n      const result = await db.collection(\"form-messages\").insertOne(newMessage);\n      newMessage.id = result.insertedId;\n    } catch (error) {\n      client.close();\n      res.status(500).json({ message: \"Storing message failed!\" });\n      return;\n    }\n\n    client.close();\n\n    console.log(newMessage);\n    res\n    .status(201)\n    .json({ message: \"Successfully stored message!\", message: newMessage });\n    */\n  }\n}\n\nexport default uploadImage;\n"]},"metadata":{},"sourceType":"module"}